---
/**
 * Basic wrapper for Markdown content that adds the content stylings to the rendered outputs.
 */
---

<div class="content">
  <slot />
</div>
<style lang="scss">
  .content {
    h1:first-child,
    h2:first-child,
    h3:first-child,
    h4:first-child,
    h5:first-child,
    h6:first-child {
      margin-top: 0rem !important;
    }

    h1 {
      font-family: var(--heroFonts);
      font-size: 3rem;
      font-weight: 700;
      color: var(--titleTextColor);
      text-decoration: none;
    }

    h2 {
      font-family: var(--subtitleFonts);
      font-size: 2rem;
      font-weight: 400;
      color: var(--titleTextColor);

      &:nth-of-type(1) {
        margin-top: 1rem;
      }

      &:not(:nth-of-type(1)) {
        margin-top: 4rem;
      }
    }

    h3 {
      font-family: var(--subtitleFonts);
      font-size: 1.5rem;
      font-weight: 400;
      color: var(--subtitleTextColor);
      margin-top: 2.5rem;
    }

    h4 {
      font-family: var(--subtitleFonts);
      font-size: 1.375rem;
      font-weight: 400;
      color: var(--subtitleTextColor);
      margin-top: 2rem;
    }

    h5,
    h6 {
      font-family: var(--subtitleFonts);
      color: var(--subtitleTextColor);
      font-size: 1.25rem;
      font-weight: 400;
      margin-top: 1.5rem;
    }

    p,
    ul,
    ol,
    li {
      color: var(--textColor);
      font-size: 1.2rem;
      text-align: left;
    }

    strong {
      color: var(--textColor);
      font-family: var(--subtitleFonts);
      font-weight: 400;
    }

    table {
      thead {
        th {
          color: var(--textColor);
        }
      }

      width: auto;
      margin-left: auto;
      margin-right: auto;
    }

    hr {
      border-top: 1px dotted var(--backgroundAccentColor);
    }

    // prevent overscroll on table that is generated by markdown:
    // https://stackoverflow.com/a/62451601/3522314
    table {
      display: block;
      max-width: -moz-fit-content;
      max-width: fit-content;
      margin: 0 auto;
      overflow-x: auto;
      white-space: nowrap;
    }

    img {
      border: 1px solid var(--titleTextColor);
      display: block;
      margin-left: auto;
      margin-right: auto;
      margin-bottom: 2rem;
      margin-top: 2rem;
    }

    .no-border {
      border: none;
    }

    /* code blocks */
    .hll {
      margin-bottom: 1rem;
      font-family: var(--codeFonts);
      font-size: 0.875rem;
    }

    pre {
      font-family: var(--codeFonts);
      font-size: 0.875rem;

      code {
        background-color: inherit;
        color: inherit;
      }
    }

    code {
      color: var(--accent2Color);
      background-color: var(--backgroundAccentColor);
      font-family: var(--codeFonts);
      font-size: 0.875rem;
    }

    /* class used by syntax highlighter for code blocks */
    .highlight {
      margin-bottom: 0.5rem;
    }

    & .twitter-tweet {
      margin-left: auto;
      margin-right: auto;
      border: 1px solid var(--titleTextColor);
      border-radius: 0.5rem;
    }

    /* SVG files included in-line w text. */
    figure {
      // Most SVG files should retain the same default height across posts
      // for continuity. If a given graphic should be _larger_ than this,
      // add a custom class or style to it.
      height: 12rem;
      margin-left: 0rem;
      margin-right: 0rem;
    }
  }

  /* SVG */
  .color-responsive-svg {
    // Paths match the text color, text in font must be exported as curves
    path {
      // must use important here because it gets overridden by the inline
      // stroke color, which is more specific.
      stroke: var(--textColor) !important;
    }

    text {
      fill: var(--textColor) !important;
    }

    // NOTE: These selectors are intended to find svg elements where there
    // IS an existing fill or stroke, and then have them use the current
    // variables instead of their hardcoded color. This defaults to the starting
    // svg color, so that it can be selected regardless of which theme the
    // site currently is using.
    //
    // This is due to a shortcoming in Affinity Designer where it exports all
    // of the styling information in a single style tag, where it's difficult to
    // properly select individual components which _should_ or _should not_ be
    // colored appropriately. This first "fill" selector checks start of string
    // the affinity designer property export format always puts fill first.
    $tags: (rect, path, ellipse, circle);
    $colors: (
      "svgDefaultColor": var(--textColor),
      "svgAlternateColor": var(--backgroundColor),
    );
    $accentColors: (
      "accent1DefaultColor": var(--accent1Color),
      "accent2DefaultColor": var(--accent2Color),
      "accent3DefaultColor": var(--accent3Color),
      "accent4DefaultColor": var(--accent4Color),
    );
    @each $tag in $tags {
      @each $color, $colorVar in $colors {
        // match anything filled w text color
        #{$tag}[fill="#{$color}"],
        #{$tag}[style^="fill:#{$color}"] {
          fill: $colorVar !important;
        }

        // match any svg with stroke of textColor
        #{$tag}[stroke="#{$color}"],
        #{$tag}[style*="stroke:#{$color}"] {
          stroke: $colorVar !important;
        }
      }

      // queries for individual accent colors.
      @each $accent, $accentVar in $accentColors {
        #{$tag}[style^="fill:#{$accent}"] {
          fill: $accentVar !important;
        }
      }
    }
  }
</style>
