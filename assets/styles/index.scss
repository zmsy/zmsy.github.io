@import "./custom_bulma.scss";

/*
Main scss file.
This creates the main.css file and the same variables can use bulma variables.
*/

html {
  background-color: var(--backgroundColor);
}

body {
  font-family: $reading-fonts;
  background-color: var(--backgroundColor);
  color: var(--textColor); // replace with --text
}

h1 {
  font-family: $hero-fonts;
  font-size: 5rem;
  text-decoration: none;
}

a {
  color: var(--accent1Color);

  &:hover {
    color: var(--accent2Color);
  }
}

[class^="icon-"],
[class*=" icon-"] {
  color: var(--titleTextColor);
  font-size: 1.25rem;
}

/* NAV */

.navbar {
  /* padding: 0rem 3rem 0rem 3rem; */
  background-color: var(--backgroundColor);
  align-items: flex-end;
  font-family: $display-fonts;
  margin: auto;
}

.navbar-menu {
  box-shadow: none;
  background-color: var(--backgroundColor);
}

.navbar-item {
  color: var(--subtitleTextColor);
}

#navbar-columns {
  margin-bottom: 0rem;
}

#navbar-column {
  padding-bottom: 0rem;
}

.navbar-end a:hover,
.fa:hover {
  color: var(--accent2Color);
}

.navbar-burger {
  color: var(--textColor);
  margin-top: auto;
  height: 3.25rem;
}

#dark-mode-button {
  margin: 1rem auto;

  button {
    margin-left: auto;
    margin-right: auto;
  }
}

.dark-mode-selector {
  display: flex;
  flex-direction: column;
  padding: 0.5rem;
  // padding: 0rem 0rem;
  border: 1px solid var(--backgroundColor);
  // border-radius: 0rem;
  // border: none;
  background: var(--secondaryBackgroundColor);
  height: auto;
  color: var(--backgroundColor);

  &:hover {
    color: var(--backgroundAccentColor);
  }

  &:focus {
    color: var(--backgroundAccentColor);
    &:not(:active) {
      box-shadow: none;
    }
  }

  #rainbow-label {
    margin: 0rem 0rem 0.25rem 0rem;
  }

  #rainbow {
    padding: 0.125rem;
    height: 0.25rem;
    width: 100%;
    border: 1px solid var(--textColor);
    background: linear-gradient(
      to right,
      /** hard gradient is made by defining endpoints. */ var(--backgroundColor)
        0%,
      var(--backgroundColor) 10%,
      var(--backgroundAccentColor) 10%,
      var(--backgroundAccentColor) 20%,
      var(--secondaryBackgroundColor) 20%,
      var(--secondaryBackgroundColor) 30%,
      var(--titleTextColor) 30%,
      var(--titleTextColor) 40%,
      var(--subtitleTextColor) 40%,
      var(--subtitleTextColor) 50%,
      var(--textColor) 50%,
      var(--textColor) 60%,
      var(--accent1Color) 60%,
      var(--accent1Color) 70%,
      var(--accent2Color) 70%,
      var(--accent2Color) 80%,
      var(--accent3Color) 80%,
      var(--accent3Color) 90%,
      var(--accent4Color) 90%,
      var(--accent4Color) 100%
    );
  }
}

#logo-text {
  font-size: 32px;
  justify-content: flex-start;
  font-family: $display-fonts;
}

#logo-img,
.logo-img {
  padding: 0px;
  display: flex;
  justify-content: flex-end;
  max-width: 40px;
  height: auto;
  transition: 0.2s ease-in-out;
}

.logo-img:hover {
  transform: rotate(180deg);
}

// font-awesome
.fa {
  color: var(--titleTextColor);
}

.meta {
  text-align: center;
  margin-top: 1em;
}

/* CONTENT */
/* THIS IS WHERE MARKDOWN IS RENDERED */
.content {
  h1:first-child,
  h2:first-child,
  h3:first-child,
  h4:first-child,
  h5:first-child,
  h6:first-child {
    margin-top: 0rem !important;
  }

  h1 {
    font-family: $hero-fonts;
    font-size: 3rem;
    font-weight: 700;
    color: var(--titleTextColor);
    text-decoration: none;
  }

  h2 {
    font-family: $subtitle-fonts;
    font-size: 2rem;
    font-weight: 400;
    color: var(--titleTextColor);

    &:nth-of-type(1) {
      margin-top: 1rem;
    }

    &:not(:nth-of-type(1)) {
      margin-top: 4rem;
    }
  }

  h3 {
    font-family: $subtitle-fonts;
    font-size: 1.5rem;
    font-weight: 400;
    color: var(--subtitleTextColor);
    margin-top: 2.5rem;
  }

  h4 {
    font-family: $subtitle-fonts;
    font-size: 1.375rem;
    font-weight: 400;
    color: var(--subtitleTextColor);
    margin-top: 2rem;
  }

  h5,
  h6 {
    font-family: $subtitle-fonts;
    color: var(--subtitleTextColor);
    font-size: 1.25rem;
    font-weight: 400;
    margin-top: 1.5rem;
  }

  p,
  ul,
  ol,
  li {
    color: var(--textColor);
    font-size: 1.2rem;
    text-align: left;
  }

  strong {
    color: var(--textColor);
    font-family: $subtitle-fonts;
    font-weight: 400;
  }

  table {
    thead {
      th {
        color: var(--textColor);
      }
    }
  }

  hr {
    border-top: 1px dotted var(--backgroundAccentColor);
  }

  img {
    border: 1px solid var(--titleTextColor);
    display: block;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 2rem;
    margin-top: 2rem;
  }

  .no-border {
    border: none;
  }

  /* icon */
  .fa {
    font-size: 1rem;
  }

  /* code blocks */
  .hll {
    margin-bottom: 1rem;
    font-family: $code-fonts;
    font-size: 0.875rem;
  }

  pre {
    font-family: $code-fonts;
    font-size: 0.875rem;
  }

  code {
    color: var(--accent3Color);
    font-family: $code-fonts;
    font-size: 0.875rem;
  }

  /* class used by syntax highlighter for code blocks */
  .highlight {
    margin-bottom: 0.5rem;
  }

  /* admonitions */
  .admonition {
    margin-top: 1rem;
    margin-bottom: 1rem;
    padding: 1rem;
  }

  .admonition-info,
  .admonition-note {
    background-color: var(--accent4Color);
  }

  .admonition-tip {
    background-color: var(--accent2Color);

    p {
      color: var(--backgroundColor);
    }
  }

  .admonition-warning {
    background-color: var(--accent1Color);

    p {
      color: var(--backgroundColor);
    }
  }

  & .twitter-tweet {
    margin-left: auto;
    margin-right: auto;
    border: 1px solid var(--titleTextColor);
    border-radius: 0.5rem;
  }

  /* SVG files included in-line w text. */
  figure {
    // Most SVG files should retain the same default height across posts
    // for continuity. If a given graphic should be _larger_ than this,
    // add a custom class or style to it.
    height: 12rem;
  }
}

/** SVG */
.color-responsive-svg {
  // Paths match the text color, text in font must be exported as curves
  path {
    // must use important here because it gets overridden by the inline
    // stroke color, which is more specific.
    stroke: var(--textColor) !important;
  }

  text {
    fill: var(--textColor) !important;
  }

  // NOTE: These selectors are intended to find svg elements where there
  // IS an existing fill or stroke, and then have them use the current
  // variables instead of their hardcoded color. This defaults to the starting
  // svg color, so that it can be selected regardless of which theme the
  // site currently is using.
  //
  // This is due to a shortcoming in Affinity Designer where it exports all
  // of the styling information in a single style tag, where it's difficult to
  // properly select individual components which _should_ or _should not_ be
  // colored appropriately. This first "fill" selector checks start of string
  // the affinity designer property export format always puts fill first.
  rect[fill="#{$svgDefaultColor}"],
  rect[style^="fill:#{$svgDefaultColor}"],
  path[fill="#{$svgDefaultColor}"],
  path[style^="fill:#{$svgDefaultColor}"],
  ellipse[fill="#{$svgDefaultColor}"],
  ellipse[style^="fill:#{$svgDefaultColor}"],
  circle[fill="#{$svgDefaultColor}"],
  circle[style^="fill:#{$svgDefaultColor}"] {
    fill: var(--textColor) !important;
  }

  rect[stroke="#{$svgDefaultColor}"],
  rect[style*="stroke:#{$svgDefaultColor}"],
  path[stroke="#{$svgDefaultColor}"],
  path[style*="stroke:#{$svgDefaultColor}"],
  ellipse[stroke="#{$svgDefaultColor}"],
  ellipse[style*="stroke:#{$svgDefaultColor}"],
  circle[stroke="#{$svgDefaultColor}"],
  circle[style*="stroke:#{$svgDefaultColor}"] {
    stroke: var(--textColor) !important;
  }

  rect[fill="#{$svgAlternateColor}"],
  rect[style^="fill:#{$svgAlternateColor}"],
  path[fill="#{$svgAlternateColor}"],
  path[style^="fill:#{$svgAlternateColor}"],
  ellipse[fill="#{$svgAlternateColor}"],
  ellipse[style^="fill:#{$svgAlternateColor}"],
  circle[fill="#{$svgAlternateColor}"],
  circle[style^="fill:#{$svgAlternateColor}"] {
    fill: var(--backgroundColor) !important;
  }

  rect[stroke="#{$svgAlternateColor}"],
  rect[style*="stroke:#{$svgAlternateColor}"],
  path[stroke="#{$svgAlternateColor}"],
  path[style*="stroke:#{$svgAlternateColor}"],
  ellipse[stroke="#{$svgAlternateColor}"],
  ellipse[style*="stroke:#{$svgAlternateColor}"],
  circle[stroke="#{$svgAlternateColor}"],
  circle[style*="stroke:#{$svgAlternateColor}"] {
    stroke: var(--backgroundColor) !important;
  }

  // queries for individual accent colors.

  path[style^="fill:#{$accent1DefaultColor}"],
  rect[style^="fill:#{$accent1DefaultColor}"],
  circle[style^="fill:#{$accent1DefaultColor}"],
  ellipse[style^="fill:#{$accent1DefaultColor}"] {
    fill: var(--accent1Color) !important;
  }

  path[style^="fill:#{$accent2DefaultColor}"],
  ellipse[style^="fill:#{$accent2DefaultColor}"],
  circle[style^="fill:#{$accent2DefaultColor}"],
  rect[style^="fill:#{$accent2DefaultColor}"] {
    fill: var(--accent2Color) !important;
  }

  path[style^="fill:#{$accent3DefaultColor}"],
  ellipse[style^="fill:#{$accent3DefaultColor}"],
  circle[style^="fill:#{$accent3DefaultColor}"],
  rect[style^="fill:#{$accent3DefaultColor}"] {
    fill: var(--accent3Color) !important;
  }

  path[style^="fill:#{$accent4DefaultColor}"],
  ellipse[style^="fill:#{$accent4DefaultColor}"],
  circle[style^="fill:#{$accent4DefaultColor}"],
  rect[style^="fill:#{$accent4DefaultColor}"] {
    fill: var(--accent4Color) !important;
  }
}

svg {
  box-sizing: border-box;
  height: 100%;
  width: 100%;
}

/** PAGE SPACING */
.blog-post {
  margin-bottom: 8rem;
}

.pagination {
  margin-top: 1rem;
  margin-bottom: 2rem;
}

/* HEROES AND SUBTITLES */

#hero {
  margin: 1.5rem 0rem;

  & > #hero-body {
    padding: 0rem;
  }
}

.title {
  font-family: $hero-fonts;
  font-weight: normal;
  font-size: 4.5rem;
  color: var(--titleTextColor);
}

.subtitle {
  font-family: $hero-subtitle-fonts;
  font-weight: normal;
  font-size: 1.5rem;
  color: var(--titleTextColor);
}

#about-container {
  margin-top: 2rem;
}

#about-photo {
  margin: 0rem;
}

#about-logo {
  margin-top: 0.5rem;
}

#about-name {
  margin: auto;
}

.about-content {
  & p {
    font-size: 1rem;
  }
}

#about-cardtitle {
  font-family: $subtitle-fonts;
  font-size: 1.5rem;
  margin-top: 0rem;
  margin-bottom: 0rem;
}

.menu-drinks-logo {
  max-width: 15rem;
  // force important because the actual svg file doesn't get
  // exported with more specific classname/id.
  margin: 0rem auto !important;
}

.hero-title {
  font-size: 5.5rem;
}

.hero-badge {
  margin-top: 1rem;
  height: 40rem;
}

.hero-badge-mobile {
  margin-top: 0rem;
  max-width: 30rem;
  margin-left: auto;
  margin-right: auto;
}

.hero-diamonds {
  height: 20px;
  margin-top: 1rem;
  margin-bottom: 1rem;
  margin-left: auto;
  margin-right: auto;
}

#home-main-section {
  padding-top: 12rem;
}

.home-columns {
  margin-top: 1rem;

  h2 {
    font-family: $subtitle-fonts;
    font-size: 2rem;
  }

  i {
    font-size: 2.5rem;
  }

  p {
    margin-bottom: 2rem;
    margin-top: 2rem;
    margin-left: 1rem;
    margin-right: 1rem;
    padding: 1rem;
    font-size: 1.125rem;
  }

  .column-logo {
    height: 100px;
    width: 100px;
    margin: auto;
  }

  & .home-title {
    margin-bottom: 1rem;
  }
}

/* FOOTER */

.footer {
  background-color: var(--secondaryBackgroundColor);
  color: var(--backgroundColor);
  border-top: 1rem solid var(--backgroundAccentColor);

  strong {
    color: var(--backgroundColor);
  }

  & .footer-dots {
    width: 25rem;
    margin: 0.25rem auto;
  }

  & #footer-icons {
    max-width: 15rem;
    margin: 0.5rem auto;
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    [class^="icon-"] {
      // inverted icon colors for the footer.
      color: var(--backgroundColor);
    }
  }
}
